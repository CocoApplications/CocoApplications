{"version":3,"sources":["utils.js"],"names":[],"mappings":"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","file":"utils-compiled.js","sourcesContent":["\"use strict\";\n\nclass Utils {\n    static create_2D_array(rows) {\n        let arr = [];\n        for (var i = 0; i < rows; i++) arr[i] = [];\n        return arr;\n    }\n\n    static compute_grid_for_function(axis_ticks, func) {\n        let n_ticks = axis_ticks.length;\n        let z_grid = Utils.create_2D_array(n_ticks);\n        for (let x_tick = 0; x_tick < n_ticks; x_tick++) {\n            for (let y_tick = 0; y_tick < n_ticks; y_tick++) {\n                let x = axis_ticks[x_tick];\n                let y = axis_ticks[y_tick];\n                z_grid[x_tick][y_tick] = func(x, y);\n            }\n        }\n        return z_grid;\n    }\n\n    static convert_grid_to_training(z_grid, axis_ticks) {\n        let n_ticks = axis_ticks.length;\n        let trainX = [];\n        let trainY = [];\n        for (let x1_tick = 0; x1_tick < n_ticks; x1_tick++) {\n            for (let x2_tick = 0; x2_tick < n_ticks; x2_tick++) {\n                let x1 = axis_ticks[x1_tick];\n                let x2 = axis_ticks[x2_tick];\n                trainX.push([x1, x2]);\n                trainY.push(z_grid[x1_tick][x2_tick]);\n            }\n        }\n        return [trainX, trainY]\n    }\n\n    static rotate_dataset(X, angle) {\n        let X_result = [];\n        for (let i = 0; i < X.length; i++) {\n            X_result.push(Utils.rotate_event(X[i], angle));\n        }\n        return X_result;\n    }\n\n    static plot_function_to_canvas(canvas, z_grid, color_scaler) {\n        // z_grid and canvas are expected to have coinciding sizes\n        let context = canvas.getContext(\"2d\");\n        let canvasData = context.getImageData(0, 0, canvas.width, canvas.height);\n\n        // That's how you define the value of a pixel\n        function draw_pixel(x, y, value) {\n            y = canvasData.height - 1 - y;\n            let index = (x + y * canvasData.width) * 4;\n            let color = color_scaler(value);\n            // console.log('tralala', z_grid, index, value, color);\n            canvasData.data[index + 0] = color.r;\n            canvasData.data[index + 1] = color.g;\n            canvasData.data[index + 2] = color.b;\n            canvasData.data[index + 3] = 256;\n        }\n\n        for (let i = 0; i < z_grid.length; i++) {\n            let z_row = z_grid[i];\n            for (let j = 0; j < z_row.length; j++) {\n                let value = z_row[j];\n                draw_pixel(i, j, value);\n            }\n        }\n        context.putImageData(canvasData, 0, 0);\n    }\n\n    static plot_scatter_to_canvas(canvas, X, y, sizes, color_scaler) {\n        let context = canvas.getContext(\"2d\");\n\n        for (let event_id = 0; event_id < y.length; event_id++) {\n            let x1 = X[event_id][0] * canvas.width;\n            let x2 = (1 - X[event_id][1]) * canvas.height;\n            context.beginPath();\n            context.arc(x1, x2, sizes[event_id], 0, 2 * Math.PI, false);\n            context.fillStyle = color_scaler(2 * y[event_id] - 1).toString();\n            context.fill();\n        }\n    }\n\n    static rotate_event(x, angle) {\n        let x1 = x[0] - 0.5;\n        let x2 = x[1] - 0.5;\n        let new_x1 = Math.cos(angle) * x1 - Math.sin(angle) * x2;\n        let new_x2 = Math.sin(angle) * x1 + Math.cos(angle) * x2;\n        return [new_x1 + 0.5, new_x2 + 0.5];\n    }\n\n    static create_fast_color_scaler(colors, n_shades, domain=[-1, 1]) {\n        // Get a range of colors.\n        let tmp_scale = Plotly.d3.scale.linear()\n            .domain([0, 0.5, 1])\n            .range(colors)\n            .clamp(true);\n        let colors_sequence = [];\n        for (let shade = 0; shade < n_shades + 1; shade++) {\n            colors_sequence.push(Plotly.d3.rgb(tmp_scale(shade / n_shades)))\n        }\n        return Plotly.d3.scale.quantize()\n            .domain(domain)\n            .range(colors_sequence);\n    }\n\n    static create_nonplotly_scaler(colors, domain=[-1, 1]) {\n        // Get a range of colors.\n        let result = function(x){\n            x = (x - domain[0]) / (domain[1] - domain[0]);\n            x = Math.max(x, 0.01);\n            x = Math.min(x, 0.99);\n            x = x * (colors.length - 1);\n            let left = Math.floor(x);\n            let l = colors[left];\n            let r = colors[left + 1];\n            let t = x - left;\n            return {\n                r: r.r * t + l.r * (1 - t),\n                g: r.g * t + l.g * (1 - t),\n                b: r.b * t + l.b * (1 - t),\n            }\n        }\n        return result;\n    }\n\n    static get_3d_plot(axis_ticks, opacity=1.){\n        let result = {\n            x: clone(axis_ticks),\n            y: clone(axis_ticks),\n            z: Utils.compute_grid_for_function(axis_ticks, (x, y)=>{return  (x + y - 1) / 2;}),\n            showscale: false,\n            type: 'surface',\n            hoverinfo: 'none'\n        };\n        if((opacity != null) && (opacity < 1)) {\n            result['opacity'] = opacity;\n        }\n        return result;\n    }\n\n    static draw_function_on_canvas(canvas, values, minimum, maximum, color, selected_point=null){\n        // learning curves\n        let ctx = canvas.getContext('2d');\n\n        ctx.beginPath();\n        ctx.strokeStyle = color;\n        function compute_x(index){\n            return index / values.length * canvas.width\n        }\n        function compute_y(value){\n            return (1 - (value - minimum) / (maximum - minimum)) * (canvas.height - 1);\n        }\n        ctx.moveTo(0, compute_y(values[0]));\n\n        for (let i = 1; i < values.length; i++) {\n            ctx.lineTo(compute_x(i), compute_y(values[i]));\n        }\n        ctx.stroke();\n\n        if(selected_point != null){\n            var centerX = compute_x(selected_point);\n            var centerY = compute_y(values[selected_point]);\n            var radius = 4;\n\n            ctx.beginPath();\n            ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n            ctx.fillStyle = color;\n            ctx.fill();\n            //context.lineWidth = 1;\n            //context.strokeStyle = '#003300';\n            ctx.stroke();\n        }\n    }\n\n\n    static compute_sum(array){\n        return array.reduce(function(a, b) { return a + b; }, 0);\n    }\n\n    static compute_mean(array){\n        return Utils.compute_sum(array) / array.length;\n    }\n\n    static get_subsample_indices(n_original, n_subsampled, random_seed) {\n        let shuffled = [];\n        for (let j = 0; j < n_original; j++) {\n            shuffled[j] = j;\n        }\n\n        let random_state = new RandomGenerator(random_seed);\n\n        let i = n_original;\n        while (i--) {\n            let index = Math.floor((i + 1) * random_state.random());\n            let temp = shuffled[index];\n            shuffled[index] = shuffled[i];\n            shuffled[i] = temp;\n        }\n        return shuffled.slice(0, n_subsampled);\n    }\n\n    static get_subsample(X, y, subsample, random_seed){\n        let n_original = X.length;\n        let n_generated = Math.ceil(subsample * n_original);\n        if (subsample == 1){\n            return [X, y]\n        } else {\n            let indices = Utils.get_subsample_indices(n_original, n_generated, random_seed);\n            let X_new = [];\n            let y_new = [];\n            for(let i = 0; i < indices.length; i++) {\n                let index = indices[i];\n                X_new.push(X[index]);\n                y_new.push(y[index]);\n            }\n            return [X_new, y_new];\n        }\n    }\n}\n\nclass VectorUtils{\n    static add(a, b){\n        if(a.length != b.length){\n            console.error('lengths inequal', a, b);\n        }\n        let result = [];\n        for(let i=0; i < a.length; i++){\n            result[i] = a[i] + b[i];\n        }\n        return result;\n    }\n\n    static add_with_coeffs(a, b, c_a, c_b){\n        if(a.length != b.length){\n            console.error('lengths inequal', a, b);\n        }\n        let result = [];\n        for(let i=0; i < a.length; i++){\n            result[i] = a[i] * c_a + b[i] * c_b;\n        }\n        return result;\n    }\n\n    static multiply(a, c_a){\n        let result = [];\n        for(let i=0; i < a.length; i++){\n            result[i] = a[i] * c_a\n        }\n        return result;\n    }\n\n    static norm_squared(a){\n        let result = 0.;\n        for(let i = 0; i < a.length; i++){\n            result += a[i] * a[i];\n        }\n        return result;\n    }\n}\n\nfunction clone(object) {\n    return JSON.parse(JSON.stringify(object));\n}"]}