{"version":3,"sources":["datasets.js"],"names":[],"mappings":"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","file":"datasets-compiled.js","sourcesContent":["// different parts adopted from\n// - http://otoro.net/ml/neat-playground/datafit-neat.js\n// - and https://github.com/tensorflow/playground/blob/master/dataset.ts\n// - stackoverflow\n// - most datasets developed by me\n\"use strict\";\n\nclass RandomGenerator {\n    constructor(seed) {\n        this.m_w = seed || 123456789;\n        this.m_z = 987654321;\n        this.mask = 0xffffffff;\n    }\n\n    random() {\n        this.m_z = (36969 * (this.m_z & 65535) + (this.m_z >> 16)) & this.mask;\n        this.m_w = (18000 * (this.m_w & 65535) + (this.m_w >> 16)) & this.mask;\n        let result = ((this.m_z << 16) + this.m_w) & this.mask;\n        result /= 4294967296;\n        return result + 0.5;\n    }\n\n    random_float(a, b) {\n        // generate random floating point number uniformly between a and b\n        return this.random() * (b - a) + a;\n    }\n\n    random_int(a, b) {\n        // generate random integer uniformly between a and b (b excluded)\n        return Math.floor(this.random_float(a, b - 0.00001));\n    }\n\n    random_normal(mean, sigma) {\n        let std_normal = 0.;\n        for (let i = 0; i < 8; i++) std_normal += this.random();\n        std_normal = (std_normal - 4.) / Math.sqrt(8 / 12);\n        return mean + std_normal * sigma;\n    }\n}\n\nfunction generate_circular_classification_sample(n_samples, seed) {\n    let random = new RandomGenerator(seed);\n    let X = [];\n    let y = [];\n\n    for (let event_id = 0; event_id < n_samples; event_id++) {\n        let label = random.random_int(0, 2);\n        let phi = random.random_float(0, 2 * Math.PI);\n        let rho = (3 * random.random() + label * 3) / 10.;\n        let x1 = Math.cos(phi) * rho + 0.5;\n        let x2 = Math.sin(phi) * rho + 0.5;\n        X.push([x1, x2]);\n        y.push(label);\n    }\n    return [X, y];\n}\n\n\nfunction generate_xor_data(N, seed) {\n    let random = new RandomGenerator(seed);\n    let X = [];\n    let labels = [];\n    for (let i = 0; i < N; i++) {\n        let x = random.random_float(0, 1);\n        let y = random.random_float(0, 1);\n        let label = 0;\n        if (x > 0.5 && y > 0.5) label = 1;\n        if (x < 0.5 && y < 0.5) label = 1;\n        X.push([x, y]);\n        labels.push(label);\n    }\n    return [X, labels];\n}\n\nfunction generate_spiral_data(N, noise, seed) {\n    let random = new RandomGenerator(seed);\n    let X = [];\n    let labels = [];\n\n    let n = N / 2;\n    for (let label = 0; label < 2; label++) {\n        let delta_phi = label * Math.PI;\n        for (let i = 0; i < N / 2; i++) {\n            let r = 0.5 * i / n;\n            let phi = 1.75 * i / n * 2 * Math.PI + delta_phi;\n            let x = 0.5 + r * Math.sin(phi) + random.random_float(-1, 1) * noise;\n            let y = 0.5 + r * Math.cos(phi) + random.random_float(-1, 1) * noise;\n            X.push([x, y]);\n            labels.push(label);\n        }\n    }\n    return [X, labels];\n}\n\n// function generate_gaussian_data(N, noise, seed) {\n//     let random = new RandomGenerator(seed);\n//     let X = [];\n//     let labels = [];\n//\n//     function _generate_gaussian(xc, yc, label) {\n//         let n = N / 2;\n//         for (let i = 0; i < n; i++) {\n//             let x = random.random_normal(xc, noise);\n//             let y = random.random_normal(yc, noise);\n//             X.push([x, y]);\n//             labels.push(label);\n//         }\n//     }\n//\n//     _generate_gaussian(0.7, 0.7, 1); // Positive examples.\n//     _generate_gaussian(0.3, 0.3, 0); // Negative examples.\n//     return [X, labels];\n// }\n\nfunction generate_stripes_data(N, noise, seed) {\n    let random = new RandomGenerator(seed);\n    let X = [];\n    let labels = [];\n    for (let i = 0; i < N; i++) {\n        let phi = random.random_float(0, 2 * Math.PI);\n        let rho = Math.sqrt(random.random_float(0, 1.)) * 0.5;\n        let x1 = rho * Math.cos(phi) + 0.5;\n        let x2 = rho * Math.sin(phi) + 0.5;\n        let label = Math.floor(x2 * 8) % 2;\n        labels.push(label);\n        X.push([x1, x2]);\n    }\n    return [X, labels];\n}\n\nfunction generate_embedded_circles_data(N, noise, seed) {\n    let random = new RandomGenerator(seed);\n    let X = [];\n    let labels = [];\n    for (let i = 0; i < N; i++) {\n        let phi = i / N * (2. * Math.PI);\n        let rho = Math.sqrt(random.random_float(0, 1.)) * 0.5;\n        let x1 = rho * Math.cos(phi) + 0.5;\n        let x2 = rho * Math.sin(phi) + 0.5;\n        let label = Math.floor(rho * 10) % 2;\n        labels.push(label);\n        X.push([x1, x2]);\n    }\n    return [X, labels];\n}\n\n\nfunction generate_ying_yang_data(N, noise, seed) {\n    let random = new RandomGenerator(seed);\n    let X = [];\n    let labels = [];\n    for (let i = 0; i < N; i++) {\n        let phi = i / N * (2. * Math.PI);\n        let rho = Math.sqrt(random.random_float(0, 1.));\n        let x1 = rho * Math.cos(phi);\n        let x2 = rho * Math.sin(phi);\n        let label = 2 * x2 > Math.sin(3 * x1) ? 0 : 1;\n        if( (Math.abs(x1) - 0.55) * (Math.abs(x1) - 0.55) + x2 * x2 < 0.2 * 0.2) {\n            label = 1 - label;\n        }\n        x1 = x1 / 2 + 0.5;\n        x2 = x2 / 2 + 0.5;\n        labels.push(label);\n        X.push([x1, x2]);\n    }\n    return [X, labels];\n}\n\n\n\nfunction collect_datasets(n_samples, seed) {\n    let datasets = [];\n    datasets.push(generate_circular_classification_sample(n_samples, seed));\n    datasets.push(generate_xor_data(n_samples, seed));\n    datasets.push(generate_spiral_data(n_samples, 0.05, seed));\n    datasets.push(generate_ying_yang_data(n_samples, null, seed));\n    datasets.push(generate_stripes_data(n_samples, null, seed));\n    datasets.push(generate_embedded_circles_data(n_samples, null, seed));\n    return datasets;\n}"]}