{"version":3,"sources":["boosting_playground.js"],"names":[],"mappings":"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","file":"boosting_playground-compiled.js","sourcesContent":["// TODO unfolding of trees?\n// TODO optimize drawing?\n// TODO second-order xgboost-like building?\n// TODO show losses vs show gradients on hover?\n// TODO exploss, mse_loss for comparison?\n// TODO show test data?\n\n\n\"use strict\";\n\n// everything is computed on the same grid in this demo\nlet n_ticks = 50;\nlet axis_ticks = [];\nfor (let x_tick = 0; x_tick < n_ticks; x_tick++) {\n    axis_ticks.push((x_tick + 0.5) / n_ticks);\n}\n\nclass PlaygroundVisualization {\n    constructor() {\n        this.main_canvas = this.getId('playground_visualization_canvas');\n        this.main_canvas.width = this.main_canvas.height = 250;\n        this.learning_curves_canvas = this.getId('playground_learning_curves_canvas');\n        this.learning_curves_canvas.width = 250;\n        this.learning_curves_canvas.height = 60;\n        this.train_loss_display = this.getId('playground_train_loss_display');\n        this.test_loss_display = this.getId('playground_test_loss_display');\n\n        this.separate_trees_container_div = this.getId('playground_trees_container');\n        this.prediction_label = this.getId('playground_prediction_label');\n        this.depth_control = this.getId('playground_depth_control');\n        this.depth_display = this.getId('playground_depth_display');\n        this.rate_control = this.getId('playground_rate_control');\n        this.rate_display = this.getId('playground_rate_display');\n        this.ntrees_control = this.getId('playground_ntrees_control');\n        this.ntrees_display = this.getId('playground_ntrees_display');\n        this.subsample_control = this.getId('playground_subsample_control');\n        this.subsample_display = this.getId('playground_subsample_display');\n        this.angle_control = this.getId('playground_angle_control');\n        this.rotate_trees_control = this.getId('playground_rotate_control');\n        this.show_gradients_control = this.getId('playground_show_gradient_control');\n        this.use_newton_raphson_control = this.getId('playground_use_newton_raphson');\n\n        let redraw = () => {\n            this.redraw();\n        };\n        this.rate_control.oninput = redraw;\n        this.ntrees_control.oninput = redraw;\n        this.depth_control.oninput = redraw;\n        this.angle_control.oninput = redraw;\n        this.subsample_control.oninput = redraw;\n        this.rotate_trees_control.onchange = redraw;\n        this.show_gradients_control.onchange = redraw;\n        this.use_newton_raphson_control.onchange = redraw;\n\n        this.invisible_canvas = document.createElement('canvas');\n        this.invisible_canvas.width = n_ticks;\n        this.invisible_canvas.height = n_ticks;\n\n        this.color_scaler_points = Utils.create_fast_color_scaler([\"#f59322\", \"#e8eaeb\", \"#0877bd\"], 30);\n        this.color_scaler_heatmap = Utils.create_fast_color_scaler([\"#f5b362\", \"#e8eaeb\", \"#28a7cd\"], 30);\n\n        this.n_shown_trees = 30;\n        this.n_trained_trees = 100;\n        this.getId('span_n_shown_trees').innerHTML = this.n_shown_trees.toString();\n\n        this.trees_canvases = [];\n        this.plus_controls = [];\n\n        // Canvases for separate trees\n        for (let tree_id = 0; tree_id < this.n_shown_trees; tree_id++) {\n            let canvas = document.createElement('canvas');\n            canvas.setAttribute('class', 'separate_tree_visualization');\n            canvas.width = n_ticks;\n            canvas.height = n_ticks;\n            // hover for canvas\n            canvas.onmouseenter = canvas.ontouchstart = () => {\n                this.redraw_main_canvas(1, tree_id);\n            };\n            canvas.onmouseleave = canvas.ontouchend  = () => {\n                this.redraw_main_canvas(0, null);\n            };\n\n            let plus_control = document.createElement('div');\n            plus_control.appendChild(document.createElement('div'));\n            plus_control.setAttribute('class', 'plus_control_element');\n            plus_control.onmouseenter = plus_control.ontouchstart = () => {\n                this.set_participation_in_sum(tree_id + 1);\n                this.redraw_main_canvas(2, tree_id);\n            };\n            plus_control.onmouseleave = plus_control.ontouchend = () => {\n                this.set_participation_in_sum(0);\n                this.redraw_main_canvas(0, null);\n            };\n\n            this.separate_trees_container_div.appendChild(canvas);\n            this.separate_trees_container_div.appendChild(plus_control);\n            this.trees_canvases.push(canvas);\n            this.plus_controls.push(plus_control);\n        }\n\n        this.classification_datasets = collect_datasets(300, 42);\n        this.classification_test_datasets = collect_datasets(300, 1234);\n        this.selected_dataset_id = 2;\n        this.redraw_datasets();\n        this.redraw();\n    }\n\n    getId(id){\n        let result = document.getElementById(id);\n        console.assert(result != null, 'no such id');\n        return result;\n    }\n\n    set_participation_in_sum(n_estimators) {\n        // sets classes to elements participating in sum\n        let previous_elements = document.getElementsByClassName('participates-in-sum');\n        for (let i = previous_elements.length - 1; i >= 0 ; i--) {\n            previous_elements[i].classList.remove('participates-in-sum');\n        }\n        for (let i = 0; i < n_estimators; i++) {\n            this.trees_canvases[i].classList.add('participates-in-sum');\n            this.plus_controls[i].classList.add('participates-in-sum');\n        }\n    }\n\n    compute_store_predictions(trainX, trainY, testX, testY, depth, learning_rate,\n                              n_estimators, subsample, rotate_trees, use_newton_raphson) {\n        let gb_clf = new GradientBoostingClassifier(trainX, trainY, n_estimators, depth, learning_rate,\n            subsample, rotate_trees, use_newton_raphson);\n        this.n_trained_trees = n_estimators;\n        this.computed_predictions = {};\n        this.computed_predictions['trees'] = [];\n        this.computed_predictions['stage_predictions'] = [];\n        let cumulative_decision_function = Utils.compute_grid_for_function(axis_ticks, function (x1, x2) {\n            return 0;\n        });\n\n        //for (let tree_id = 0; tree_id < this.n_shown_trees; tree_id++) {\n        for (let tree_id = 0; tree_id < this.n_trained_trees; tree_id++) {\n            let tree_prediction = Utils.compute_grid_for_function(axis_ticks, function (x1, x2) {\n                return gb_clf._predict_one_event_by_tree([x1, x2], tree_id);\n            });\n            this.computed_predictions['trees'][tree_id] = tree_prediction;\n            let stage_predictions = Utils.create_2D_array(n_ticks);\n            for (let i = 0; i < n_ticks; i++) {\n                for (let j = 0; j < n_ticks; j++) {\n                    cumulative_decision_function[i][j] += gb_clf.learning_rate * tree_prediction[i][j];\n                    stage_predictions[i][j] = 2 * GradientBoostingClassifier.sigmoid(cumulative_decision_function[i][j]) - 1;\n                }\n            }\n            this.computed_predictions['stage_predictions'][tree_id] = stage_predictions;\n        }\n\n        // store for visualization\n        this.trainX = trainX;\n        this.trainY = trainY;\n        this.testX = testX;\n        this.testY = testY;\n        [this.train_losses, this.train_gradients] = gb_clf.compute_learning_curve(trainX, trainY);\n        [this.test_losses, this.test_gradients] = gb_clf.compute_learning_curve(testX, testY);\n    }\n\n    redraw() {\n        let learning_rate = this.rate_control.value * 0.01;\n        this.rate_display.innerHTML = learning_rate.toString().substr(0, 4);\n        let ntrees = this.ntrees_control.value;\n        this.ntrees_display.innerHTML = ntrees.toString();\n        let depth = this.depth_control.value;\n        this.depth_display.innerHTML = depth.toString();\n        let subsample = this.subsample_control.value * 0.01;\n        this.subsample_display.innerHTML = Math.ceil(subsample * 100).toString();\n\n        this.show_gradients = this.show_gradients_control.checked ? 1 : 0;\n        let use_newton_raphson = this.use_newton_raphson_control.checked ? 1 : 0;\n\n\n        let rotation_angle = -this.angle_control.value / 180 * Math.PI;\n        let rotate_trees = this.rotate_trees_control.checked ? 1 : 0;\n\n        let [trainX, trainY] = this.classification_datasets[this.selected_dataset_id];\n        let [testX, testY] = this.classification_test_datasets[this.selected_dataset_id];\n        trainX = Utils.rotate_dataset(trainX, rotation_angle);\n        testX = Utils.rotate_dataset(testX, rotation_angle);\n\n        this.compute_store_predictions(trainX, trainY, testX, testY,\n            depth, learning_rate, ntrees, subsample, rotate_trees, use_newton_raphson);\n\n        this.redraw_main_canvas(0, null);\n        this.redraw_trees_canvases();\n        this.redraw_learning_curves();\n\n    }\n\n    draw_on_main_canvas(data, gradient_sizes) {\n        let average_size = 3;\n        gradient_sizes = gradient_sizes.map((x) => Math.sqrt(x));\n        if(this.show_gradients) {\n            let factor = average_size / Utils.compute_mean(gradient_sizes);\n            for (let i = 0; i < gradient_sizes.length; i++) {\n                gradient_sizes[i] *= factor;\n            }\n        } else {\n            gradient_sizes = Array(gradient_sizes.length).fill(average_size);\n        }\n\n        Utils.plot_function_to_canvas(this.invisible_canvas, data, this.color_scaler_heatmap);\n        this.main_canvas.getContext('2d').drawImage(this.invisible_canvas, 0, 0,\n            this.main_canvas.width, this.main_canvas.height);\n        Utils.plot_scatter_to_canvas(this.main_canvas, this.trainX, this.trainY,\n            gradient_sizes, this.color_scaler_points);\n    }\n\n    redraw_main_canvas(mode, pointed_tree=null) {\n        // special function for hover effect\n        if (mode == 0) {\n            let staged = this.computed_predictions['stage_predictions'];\n            let gradient_sizes = Array(this.trainY.length).fill(1);\n            this.draw_on_main_canvas(staged[staged.length - 1], gradient_sizes);\n            this.prediction_label.innerHTML = \"predictions of GB (all \" + this.n_trained_trees.toString() + \" trees)\";\n        } else if (mode == 1) {\n            this.draw_on_main_canvas(this.computed_predictions['trees'][pointed_tree],\n                this.train_gradients[pointed_tree]);\n            this.prediction_label.innerHTML = \"predictions of tree #\"\n                + (pointed_tree + 1).toString() + \" <br /> and used gradients \";\n        } else {\n            // stage predictions\n            this.draw_on_main_canvas(this.computed_predictions['stage_predictions'][pointed_tree],\n                this.train_gradients[pointed_tree + 1]);\n            this.prediction_label.innerHTML = \"predictions of GB after building tree #\"\n                + (pointed_tree + 1).toString() + \" <br /> and computed gradients\";\n        }\n        this.redraw_learning_curves(pointed_tree);\n    }\n\n    redraw_trees_canvases() {\n        // Drawing separate trees\n        for (let tree_id = 0; tree_id < this.n_shown_trees; tree_id++) {\n            let z_grid = this.computed_predictions['trees'][tree_id];\n            let canvas = this.trees_canvases[tree_id];\n            Utils.plot_function_to_canvas(canvas, z_grid, this.color_scaler_heatmap);\n        }\n    }\n\n    redraw_datasets() {\n        let wrapper_div = this.getId('classification_datasets');\n        wrapper_div.innerHTML = \"\";\n        for (let dataset_id = 0; dataset_id < this.classification_datasets.length; dataset_id++) {\n            let canvas = document.createElement('canvas');\n            canvas.width = 40;\n            canvas.height = 40;\n            canvas.className = 'dataset-preview';\n            canvas.onclick = () => {\n                this.selected_dataset_id = dataset_id;\n                this.redraw();\n                this.redraw_datasets();\n            };\n            if (dataset_id == this.selected_dataset_id){\n                canvas.classList.add(\"selected-dataset-preview\");\n            }\n            let dataset = this.classification_datasets[dataset_id];\n            let sizes = Array(dataset[1].length).fill(1);\n            Utils.plot_scatter_to_canvas(canvas, dataset[0], dataset[1], sizes, this.color_scaler_heatmap);\n            wrapper_div.appendChild(canvas);\n        }\n    }\n\n    redraw_learning_curves(pointed_tree=null){\n        let canvas = this.learning_curves_canvas;\n        // clearing\n        canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);\n        let maximum = this.train_losses[0] * 1.1;\n        Utils.draw_function_on_canvas(canvas, this.train_losses, 0, maximum, '#888', pointed_tree);\n        Utils.draw_function_on_canvas(canvas, this.test_losses, 0, maximum, '#000', pointed_tree);\n\n        if(pointed_tree == null){\n            pointed_tree = this.train_losses.length - 1;\n        }\n        this.train_loss_display.innerHTML = this.train_losses[pointed_tree].toFixed(3);\n        this.test_loss_display.innerHTML = this.test_losses[pointed_tree].toFixed(3);\n    }\n}\n\nlet playground = new PlaygroundVisualization();\n"]}