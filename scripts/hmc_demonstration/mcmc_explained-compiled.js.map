{"version":3,"sources":["mcmc_explained.js"],"names":[],"mappings":"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","file":"mcmc_explained-compiled.js","sourcesContent":["\"use strict\";\n\n//\n// TODO твиттер-теги, картинка (или GIF?)\n\nlet rejected_color = [1.0, 0.6, 0.6 ];\nlet accepted_color = [0.6, 1.0, 0.6 ];\nlet true_point_color = [0.6, 0.6, 1.0];\n\nclass MCDatasetSelector {\n    constructor(wrapper_div, on_dataset_change, {n_ticks = 45, selected_dataset=0} = {}) {\n        // everything is computed on the same grid\n        this.n_ticks = n_ticks;\n        this.axis_ticks = [];\n        for (let x_tick = 0; x_tick < n_ticks; x_tick++) {\n            this.axis_ticks.push((x_tick + 1.) / (n_ticks + 1));\n        }\n        this.datasets = MCDatasetSelector.collect_toy_datasets(this.axis_ticks);\n\n        this.wrapper_div = wrapper_div;\n        let _colors = [{r: 0x28, g: 0xa7, b: 0xcd }, {r: 0xe8, g: 0xea, b: 0xeb}, {r: 0xf5, g: 0xb3, b: 0x62}];   \n        this.color_scaler_heatmap = Utils.create_nonplotly_scaler(_colors, [0, 1.5]);\n\n        for (let i = 0; i < this.datasets.length; i++) {\n            let canvas = document.createElement('canvas');\n            canvas.width = n_ticks;\n            canvas.height = n_ticks;\n            this.wrapper_div.appendChild(canvas);\n            // hover for canvas\n            canvas.onclick = () => {\n                this.select_dataset(i);\n            };\n            Utils.plot_function_to_canvas(canvas, this.datasets[i][0], this.color_scaler_heatmap);\n        }\n        this.selected_dataset = selected_dataset;\n        // trivial event for callback\n        this.on_dataset_change = on_dataset_change;\n    }\n\n    get_current_dataset() {\n        return this.datasets[this.selected_dataset];\n    }\n\n    select_dataset(selected_dataset) {\n        this.selected_dataset = selected_dataset;\n        this.redraw();\n        this.on_dataset_change();\n    }\n\n    redraw() {\n        let i = 0;\n        let children = Array.from(this.wrapper_div.children);\n        for(let control of children) {\n            control.classList.remove('selected');\n            if( i == this.selected_dataset ) {\n                control.classList.add('selected');\n            }\n            i += 1;\n        }\n    }\n\n    static collect_toy_datasets(axis_ticks) {\n        let distributions = [];\n\n        // distributions.push(new GaussianDistribution());\n        distributions.push(new GaussianDistribution([0., 0.], 0.8, 0.4));\n        distributions.push(new SnakeDistribution());\n        distributions.push(new MexicanHatDistribution());\n        distributions.push(new GaussianMixtureDistribution(0.4, 0.4));\n        // if you're not satisfied with previous datasets\n        // distributions.push(new DoubleHoleDistribution());\n\n        let datasets = [];\n        for (let i = 0; i < distributions.length; i++) {\n            let compute = (x, y) => distributions[i].energy([2 * x - 1, 2 * y - 1]);\n            let z_grid = Utils.compute_grid_for_function(axis_ticks, compute);\n            datasets.push([z_grid, distributions[i]]);\n        }\n        return datasets;\n    }\n}\n\n\nfunction iterate_with_pauses(context, iterator){\n    // animation_id allows only one iterating process to exist within single context\n    // new 'process' has priority and automatically stops previous\n    let animation_id = Date.now();\n    context.animation_id = animation_id;\n\n    function iterate(iterator){\n        if (context.animation_id != animation_id) {\n            return;\n        }\n        let {value, done} = iterator.next();\n        if (!done) {\n            setTimeout(() => {iterate(iterator);},  value * 1000.);\n        } else {\n            context.animation_id = null;\n        }\n    }\n    // run iteration\n    iterate(iterator);\n}\n\nclass MCVisualization {\n    constructor(\n        wrapper_div, \n        {methods=['mh', 'hmc'], enable_tempering=false, selected_dataset=0, initial_temperature=4} = {}) {\n        this.methods = methods;\n        this.enable_tempering = enable_tempering;\n        this.wrapper_div = wrapper_div;\n        let control_template = document.getElementById('templates').getElementsByClassName('mc_visualization_wrapper')[0];\n        this.wrapper_div.innerHTML = control_template.innerHTML;\n\n        this.main_div = this.get_by_class('visualization');\n\n        this.method_select_control = this.get_by_class('method_select_control');\n        this.method_select_control.value = this.methods[0];\n        this.dataset_control = this.get_by_class('dataset_control');\n        this.temperature_control = this.get_by_class('temperature_control');\n        this.temperature_control.value = initial_temperature;\n        this.temperature_display = this.get_by_class('temperature_display');\n        this.tempering_control = this.get_by_class('tempering_control');\n        this.tempering_display = this.get_by_class('tempering_display');\n        this.speed_control = this.get_by_class('speed_control');\n        this.speed_display = this.get_by_class('speed_display');\n        this.length_control = this.get_by_class('trajectory_length_control');\n        this.length_display = this.get_by_class('trajectory_length_display');\n        this.mh_spread_control = this.get_by_class('spread_control');\n        this.mh_spread_display = this.get_by_class('spread_display');\n\n        this.show_generated_control = this.get_by_class('show_generated_control');\n        this.show_true_control = this.get_by_class('show_true_control');\n        this.show_rejected_control = this.get_by_class('show_rejected_control');\n\n\n        let redraw = () => { this.redraw() };\n        let update = () => { this.redraw({force_restart_animation: false}) };\n        this.method_select_control.oninput = redraw;\n        this.temperature_control.oninput = redraw;\n        this.tempering_control.oninput = redraw;\n        this.length_control.oninput = redraw;\n        this.mh_spread_control.oninput = redraw;\n        \n        this.speed_control.oninput = () => {this.redraw({speed_changed: true, force_restart_animation: false})};\n        this.show_generated_control.onchange = update;\n        this.show_true_control.onchange = update;\n        this.show_rejected_control.onchange = update;\n\n        this.dataset = new MCDatasetSelector(this.dataset_control, redraw, {selected_dataset: selected_dataset});\n        let ticks = this.dataset.axis_ticks;\n\n\n        this.plot = new Plot3D(this.main_div, {});\n\n        let distribution = this.dataset.get_current_dataset()[1];\n\n        this.surface = this.plot.addSurfaceMesh((x, y) => distribution.energy([x, y]));\n        this.true_distribution_points = this.plot.addDynamicPoints();\n        this.generated_points = this.plot.addDynamicPoints();\n        this.current_position_point = this.plot.addDynamicPoints({max_points: 1});\n        this.current_position_point.points.material.size = 0.025;\n        this.rejected_points = this.plot.addDynamicPoints();\n        this.plot.addCoordinateGrid();\n        this.hmc_trajectory = this.plot.addDynamicLine();\n\n        // Identifier of currently running animation\n        this.animation_id = null;\n\n        this.hide_controls();\n\n        this.redraw();\n    }\n\n    hide_controls() {\n        if(this.methods.length == 1) {\n            this.get_by_class('method_controls').style.display = 'none';\n        }\n        if(this.methods.indexOf('hmc') === -1) {\n            $(this.wrapper_div).find('.hmc_only_control').hide(0);\n//            for(let control of this.wrapper_div.getElementsByClassName('hmc_only_control')) {\n//                control.style.display = 'none';\n//            }\n        }\n        if(this.methods.indexOf('mh') === -1) {\n            $(this.wrapper_div).find('.mh_only_control').hide(0);\n//            for(let control of this.wrapper_div.getElementsByClassName('mh_only_control')) {\n//                control.style.display = 'none';\n//            }\n        }  \n        if(!this.enable_tempering) {\n            $(this.wrapper_div).find('.tempering_only_control').hide(0);\n//            for(let control of this.wrapper_div.getElementsByClassName('tempering_only_control')) {\n//                control.style.display = 'none';\n//            }\n        }  \n    }\n\n    get_by_class(className){\n        return this.wrapper_div.getElementsByClassName(className)[0];\n    }\n\n    setTruePoints(T) {\n        this.true_distribution_points.flush();\n        let [z_grid, distribution] = this.dataset.get_current_dataset();\n        let points = []\n        distribution.init_sampler();\n        let random = new RandomGenerator(42);\n        for(let i = 0; i < 1000; i++){\n            let [x, y] = distribution.sample(T);\n            let point = [x, y, distribution.energy([x, y]) + random.random_normal(0, 0.001)];\n            points.push(this.plot.normalize_point(point));\n        }\n        this.true_distribution_points.set_points(points, true_point_color);\n    }\n\n\n    addCandidate(candidate_position, rejected) {\n        let normalized_position = this.plot.normalize_point(candidate_position);\n        if(rejected) {\n            this.rejected_points.add_point(normalized_position, rejected_color);\n        } else {\n            this.generated_points.add_point(normalized_position, accepted_color);\n        }\n    }\n\n    setCurrentPosition(position) {\n        this.current_position_point.flush();\n        this.current_position_point.add_point(this.plot.normalize_point(position), accepted_color);\n    }\n\n    redraw({force_restart_animation=true, speed_changed=false} = {}) {\n        // collecting parameters\n        let allowedT = [0.001, 0.003, 0.01, 0.03, 0.1, 0.3];\n        let T = allowedT[this.temperature_control.value];\n        this.temperature_display.innerHTML = T.toString();\n\n        this._speed = ['slow', 'fast', 'instant'][this.speed_control.value];\n        this._pause = [0.25, 0.05, 0.005][this.speed_control.value];\n        this.speed_display.innerHTML = this._speed;\n\n        let allowed_alpha = [1.00, 1.01, 1.02, 1.03, 1.04, 1.05, 1.06];\n        let alpha = allowed_alpha[this.tempering_control.value];\n        this.tempering_display.innerHTML = alpha.toString();\n\n        let allowed_lengths = [20, 40, 60, 100, 150];\n        let length = allowed_lengths[this.length_control.value];\n        this.length_display.innerHTML = length.toString();\n\n        let allowed_spreads = [0.02, 0.05, 0.1, 0.20, 0.4];\n        let spread = allowed_spreads[this.mh_spread_control.value];\n        this.mh_spread_display.innerHTML = spread.toString(); \n\n        let method = this.method_select_control.value;\n\n        let show_true = this.show_true_control.checked;\n        let show_generated = this.show_generated_control.checked;\n        let show_rejected = this.show_rejected_control.checked;\n\n        let [z_grid, distribution] = this.dataset.get_current_dataset();\n        if(force_restart_animation) {\n            // updating surface        \n            let new_geometry = this.plot.generateSurfaceGeometry((x, y) => distribution.energy([x, y]));\n            for(let mesh of Array.from(this.surface.children)){\n                mesh.geometry.dispose();\n                mesh.geometry = new_geometry; \n            }\n            // updating true points\n            this.setTruePoints(T);\n        }\n\n        this.true_distribution_points.points.material.visible = show_true;\n        this.generated_points.points.material.visible = show_generated;\n        this.rejected_points.points.material.visible = show_rejected;\n\n        let context = this;\n\n        function* animate() {\n            let mc_sampler = new MCSampler(distribution, -0.65, -0.75);\n            mc_sampler.set_temperature(T);\n            context.generated_points.flush();\n            context.rejected_points.flush();\n            for(let iteration = 0; iteration < 2000; iteration++) {\n                if(method == 'mh') {\n                    let [result, candidate, rejected] = mc_sampler.generate_mh(spread);\n                    context.addCandidate(candidate, rejected);\n                    context.setCurrentPosition(result);\n                } else {\n                    let [result, candidate, rejected, trajectory_3d] = mc_sampler.generate_hmc({tempering_alpha: alpha, n_steps: length});\n                    context.hmc_trajectory.set_points( trajectory_3d.map((x) => context.plot.normalize_point(x)));\n\n                    for(let j=0; j < trajectory_3d.length; j++) {\n                        context.hmc_trajectory.add_visible();\n                        if (context._speed != 'instant') {\n                            context.plot.redraw();\n                            yield context._pause / 10;\n                        }\n                    }\n                    context.addCandidate(candidate, rejected);\n                    context.setCurrentPosition(result);\n                }\n                context.plot.redraw();\n                context.hmc_trajectory.flush();\n                yield context._pause;\n            }\n        }\n\n\n        if(force_restart_animation\n           || (speed_changed && (this.animation_id == null))) {\n            iterate_with_pauses(context, animate());\n        }\n\n        this.dataset.redraw();\n        this.plot.redraw();\n    }\n}\n\nvar mcmc_visualization = new MCVisualization(\n    document.getElementById('mh_visualization_wrapper'),\n    {methods: ['mh'], selected_dataset: 1});\nvar hmc_visualization = new MCVisualization(\n    document.getElementById('hmc_visualization_wrapper'), \n    {methods: ['hmc'], enable_tempering: false, selected_dataset: 2});\nvar hmc_tempering_visualization = new MCVisualization(\n    document.getElementById('hmc_tempering_visualization_wrapper'), \n    {methods: ['hmc'], enable_tempering: true, selected_dataset: 3, initial_temperature: 2});\n\n\n\n\nclass TemperatureVisualization {\n    constructor(wrapper_div) {\n        this.wrapper_div = wrapper_div;\n        this.main_div = this.get_by_class('visualization');\n        this.temperature_control = this.get_by_class('temperature_control');\n        this.temperature_display = this.get_by_class('temperature_display');\n        this.show_true_control = this.get_by_class('show_true_control');\n\n        let redraw = () => { this.redraw() };\n        this.temperature_control.oninput = redraw;\n        this.dataset_control = this.get_by_class('dataset_control');        \n        this.dataset = new MCDatasetSelector(this.dataset_control, redraw, {selected_dataset: 1});\n        this.show_true_control.onchange = redraw;\n        \n        this.plot_energy = new Plot3D(this.get_by_class('visualization_left'), {width: 398, controlsDomElement: this.main_div}); // , display_zmax: 0.01\n        this.plot_pdf = new Plot3D(this.get_by_class('visualization_right'), {width: 398, controlsDomElement: this.main_div});\n\n        for(let plot of [this.plot_pdf, this.plot_energy]) {\n            plot.camera.position.z = 1.8;\n            plot.camera.position.y = 0.9;\n            plot.orbit.minDistance = 0.5;\n            plot.orbit.maxDistance = 2.0;\n            // needed to fight slow scrolling\n            plot.orbit.enableDamping = false;\n        }\n\n        // rotate when scrolling window\n        let scrolled = 0.;\n        window.onscroll = () => {\n            let new_scrolled = window.pageYOffset || document.documentElement.scrollTop;\n            for(let plot of [this.plot_pdf, this.plot_energy]) {\n                plot.orbit.rotate_left( (new_scrolled - scrolled) * 0.001);\n                plot.orbit.update();\n            }\n            scrolled = new_scrolled;\n        }\n \n\n        let distribution = this.dataset.get_current_dataset()[1];\n\n        let min_color = new THREE.Vector3(0.0, 0.2, 0.4);\n        let max_color = new THREE.Vector3(0.7, 0.2, 0.0);\n        this.surface_pdf = this.plot_pdf.addSurfaceMesh((x, y) => distribution.energy([x, y]), min_color, max_color);\n        this.surface_energy = this.plot_energy.addSurfaceMesh((x, y) => distribution.energy([x, y]));\n        this.true_distribution_points = this.plot_energy.addDynamicPoints();\n        this.true_distribution_points.points.material.size = 0.015;\n        this.plot_energy.addCoordinateGrid();\n        this.plot_pdf.addCoordinateGrid();\n        this.redraw();        \n    }\n\n    get_by_class(className){\n        return this.wrapper_div.getElementsByClassName(className)[0];\n    }\n\n    setTruePoints(T) {\n        this.true_distribution_points.flush();\n        let [z_grid, distribution] = this.dataset.get_current_dataset();\n        let points = []\n        distribution.init_sampler();\n        for(let i = 0; i < 1500; i++){\n            let [x, y] = distribution.sample(T);\n            let point = [x, y, distribution.energy([x, y])];\n            points.push(this.plot_energy.normalize_point(point));\n        }\n        this.true_distribution_points.set_points(points, true_point_color);\n    }\n\n    redraw(){\n        let allowedT = [0.01, 0.03, 0.1, 0.3, 1.];\n        let T = allowedT[this.temperature_control.value];\n        this.temperature_display.innerHTML = T.toString();\n        let [z_grid, distribution] = this.dataset.get_current_dataset();\n        this.setTruePoints(T);\n\n        this.true_distribution_points.points.material.visible = this.show_true_control.checked;\n\n        let min_energy = 1e10;\n        for(let x=0; x < 1; x+= 0.001) {\n            min_energy = Math.min(min_energy, distribution.energy([x, x]));\n        }\n\n        let new_pdf_geometry = this.plot_pdf.generateSurfaceGeometry((x, y) => 0.95 * Math.exp(- (distribution.energy([x, y]) - min_energy) / T), 200);\n        for(let mesh of this.surface_pdf.children){\n            mesh.geometry.dispose();\n            mesh.geometry = new_pdf_geometry; \n        }\n\n        let new_energy_geometry = this.plot_pdf.generateSurfaceGeometry((x, y) => distribution.energy([x, y]), 50);\n        for(let mesh of this.surface_energy.children){\n            mesh.geometry.dispose();\n            mesh.geometry = new_energy_geometry; \n        }\n\n        this.plot_pdf.redraw();\n        this.plot_energy.redraw();\n        this.dataset.redraw();\n    }\n}\n\nvar temperature_visualization = new TemperatureVisualization(document.getElementById('temperature_visualization_wrapper'))\n\n\n// Bind unfolding of descriptions\n$('.explanation-preview').on('click', function () {\n    let name = $(this).attr('data-explained');\n    let found = $.find('.explanation-content[data-explained=' + name + ']');\n    $(found).fadeIn(500);\n});\n\n\n\n// testing derivatives\n//function test_derivatives() {\n//    let rand = new RandomGenerator(42);\n//    let eps = 1e-3;\n//    let datasets = MCDatasetSelector.collect_toy_datasets([1]);\n//    for (let i = 0; i < datasets.length; i++) {\n//        console.log('dataset', i);\n//        let [z_grid, distribution] = datasets[i];\n//        for (let j = 0; j < 10; j++) {\n//            let x = rand.random();\n//            let y = rand.random();\n//            let der_x = (distribution.energy([x + eps, y]) - distribution.energy([x - eps, y])) / 2 / eps;\n//            let der_y = (distribution.energy([x, y + eps]) - distribution.energy([x, y - eps])) / 2 / eps;\n//            let [derx1, dery1] = distribution.gradient([x, y]);\n//            console.assert(Math.abs(der_x - derx1) < 0.1 * Math.abs(der_x) + 1e-4, der_x, derx1);\n//            console.assert(Math.abs(der_y - dery1) < 0.1 * Math.abs(der_y) + 1e-4, der_y, dery1);\n//        }\n//    }\n//}\n//test_derivatives();"]}