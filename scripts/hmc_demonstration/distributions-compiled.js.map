{"version":3,"sources":["distributions.js"],"names":[],"mappings":"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","file":"distributions-compiled.js","sourcesContent":["\nfunction takeSumDiff(x) {\n    return [(x[0] + x[1]) / Math.sqrt(2.), (x[0] - x[1]) / Math.sqrt(2.)];\n}\n\nclass GaussianDistribution{\n    constructor(mean=[0.0, 0.0], sum_std=0.6, diff_std=0.6){\n        this.mean = mean;\n        this.sum_std = sum_std;\n        this.diff_std = diff_std;\n        this.sum_var = sum_std * sum_std;\n        this.diff_var = diff_std * diff_std;\n    }\n    shift(x){return VectorUtils.add_with_coeffs(x, this.mean, 1., -1.)}\n    energy(x){\n        let [x1, x2] = this.shift(x);\n        // (x1 + x2)^2 / (4 * sum_std^2) + (x1 - x2)^2 / (4 * diff_std^2)  \n        return Math.pow(x1 + x2, 2) / (4. * this.sum_var) + Math.pow(x1 - x2, 2) / (4. * this.diff_var) ;\n    }\n    gradient(x){\n        let [x1, x2] = this.shift(x);\n        return [\n            (x1 + x2) / 2. / this.sum_var + (x1 - x2) / 2. / this.diff_var,\n            (x1 + x2) / 2. / this.sum_var - (x1 - x2) / 2. / this.diff_var\n        ];\n    }\n    init_sampler(){this.rand = new RandomGenerator(42);}\n    sample(T){\n        let noise = [\n            this.rand.random_normal(0, 1) * this.sum_std * Math.sqrt(T),\n            this.rand.random_normal(0, 1) * this.diff_std * Math.sqrt(T)\n        ];\n        return VectorUtils.add(this.mean, takeSumDiff(noise));\n    }\n}\n\n// fair 50/50 mixture\nclass MixtureDistribution{\n    constructor(component1, component2){\n        this.c1 = component1;\n        this.c2 = component2;\n    }\n    init_sampler(){\n        this.rand = new RandomGenerator(42);\n        this.c1.init_sampler();\n        this.c2.init_sampler();\n    }\n    energy(x) {\n        let p1 = Math.exp(-this.c1.energy(x));\n        let p2 = Math.exp(-this.c2.energy(x));\n        return - Math.log(p1 + p2) + 0.1;\n    }\n    gradient(x) {\n        let p1 = Math.exp(-this.c1.energy(x));\n        let p2 = Math.exp(-this.c2.energy(x));\n        return VectorUtils.add_with_coeffs(this.c1.gradient(x), this.c2.gradient(x), p1 / (p1 + p2), p2 / (p1 + p2));\n    }\n    sample(T) {\n        // no implementation \n        return;\n    }\n}\n\nclass GaussianMixture1dSampler{\n    constructor(mixture, T, n_samples=1000) {\n        this.seed = new RandomGenerator(42);\n        let seed = this.seed;\n        this.T = T;\n        let _range = 2.;\n        this.y_values = [];\n        this.y_energies = [];\n        let step = 0.001;\n        for(let y=-_range; y < _range; y += step){\n            this.y_values.push(y);\n            this.y_energies.push(mixture.energy([y / Math.sqrt(2), y / Math.sqrt(2)]));\n        }\n        let min_energy = Math.min.apply(null, this.y_energies);\n        this.y_cum_probabilities = [];\n        let cumulated_prob = 0.;\n        for(let i=0; i < this.y_energies.length; i++) {\n            this.y_energies[i] -= min_energy;\n            cumulated_prob += Math.exp( - this.y_energies[i] / T);\n            this.y_cum_probabilities[i] = cumulated_prob; \n        } \n        let Z = this.y_cum_probabilities[this.y_cum_probabilities.length - 1];\n        for(let i=0; i < this.y_energies.length; i++) {\n            this.y_cum_probabilities[i] /= Z; \n        } \n        let random_uniform = [];\n        for(let i=0; i < n_samples; i++) {\n            random_uniform.push(seed.random());\n        }\n        random_uniform.sort();\n        let result = [];\n        let cum_prob = 0.;\n        let current_bin = 0;\n        for(let i=0; i < n_samples; i++) {\n            let uniform = random_uniform[i];\n            while(this.y_cum_probabilities[current_bin] < uniform ) {\n                current_bin ++;\n            }\n            result.push(this.y_values[current_bin] + (0.5 - seed.random()) * step);\n        } \n        this.result = result;\n    }\n\n    sample() {\n        return this.result[this.seed.random_int(0, this.result.length)];\n    }\n}\n\nclass GaussianMixtureDistribution extends MixtureDistribution {\n    constructor(mean, std){\n        // try this for a bit more interesting picture\n        // super(new GaussianDistribution([-mean, -mean], std * 1.2, std), new GaussianDistribution([mean, mean], std, std));\n        super(new GaussianDistribution([-mean, -mean], std, std), new GaussianDistribution([mean, mean], std, std));\n\n        this.mean = mean;\n        this.std = std;        \n        this.sampler = new GaussianMixture1dSampler(this, 1.);\n    }\n    sample(T) {\n        // (x1 - x2) / sqrt(2) \n        let y_diff = this.rand.random_normal(0, Math.sqrt(2) * this.std * Math.sqrt(T));\n        // (x1 + x2) / sqrt(2) \n        if(T != this.sampler.T) {\n            this.sampler = new GaussianMixture1dSampler(this, T);\n        }\n        let y_sum = this.sampler.sample();\n        return  [(y_diff + y_sum) / Math.sqrt(2), (y_sum - y_diff) / Math.sqrt(2)];\n         \n    }\n}\n\nclass MexicanHatDistribution {\n    constructor(mean=0.4, sigma=0.4) {\n        this.mean = mean;\n        this.sigma = sigma;\n    }\n    init_sampler(){\n        this.rand = new RandomGenerator(42);\n    }\n\n    energy(x) {\n        let r2 = VectorUtils.norm_squared(x);\n        return Math.pow(r2 - this.mean, 2) / 2 / this.sigma / this.sigma + 0.04;\n    }\n    gradient(x) {\n        let r2 = VectorUtils.norm_squared(x);\n        let r = Math.sqrt(r2);\n        let unary = VectorUtils.multiply(x, 1. / r);\n        let deriv_over_r = 2 * (r2 - this.mean) * r / this.sigma / this.sigma;\n        return VectorUtils.multiply(unary, deriv_over_r);\n    }\n    \n    sample(T) {\n        let x = [this.rand.random_normal(0, 1), this.rand.random_normal(0, 1)];\n        let r = Math.sqrt(VectorUtils.norm_squared(x));\n        let unary = VectorUtils.multiply(x, 1. / r);\n        let new_r = false;\n        // rejection sampling of r^2\n        while(new_r == false) {\n            let proposed_sq = this.rand.random_normal(this.mean, this.sigma * Math.sqrt(T));\n            if(proposed_sq >= 0) {\n                new_r = Math.sqrt(proposed_sq);\n            }\n        }\n        return VectorUtils.multiply(unary, new_r);\n    }\n}\n\n\n\nclass SnakeDistribution {\n    constructor(alpha=0.6, beta=5.5, gamma=0.8, delta=0.4) {\n        this.alpha = alpha;\n        this.beta = beta;\n        this.gamma = gamma;\n        this.delta = delta;\n    }\n    init_sampler(){\n        this.rand = new RandomGenerator(42);\n    }\n\n    energy(x) {\n        let [x1, x2] = x;\n        let x_sum = (x1 + x2) / Math.sqrt(2);\n        let x_diff = (x1 - x2) / Math.sqrt(2);\n        let z1 = x_sum / this.gamma;\n        let z2 = (x_diff - Math.sin(this.beta * z1) * this.delta) / this.alpha;\n        return VectorUtils.norm_squared([z1, z2]) * 0.5; \n    }\n    gradient(x) {\n        let [x1, x2] = x;\n        let x_sum = (x1 + x2) / Math.sqrt(2);\n        let dx_sum = [1 / Math.sqrt(2), 1 / Math.sqrt(2)];\n        let x_diff = (x1 - x2) / Math.sqrt(2);\n        let dx_diff = [1 / Math.sqrt(2), -1 / Math.sqrt(2)];\n        let z1 = x_sum / this.gamma;\n        let dz1 = VectorUtils.multiply(dx_sum, 1. / this.gamma);\n        let z2 = (x_diff - Math.sin(this.beta * z1) * this.delta) / this.alpha;\n        // let dz2  = (dx_diff - Math.cos(this.beta * z1) * this.beta * this.delta * dz1) / this.alpha; \n        // let dz2_part2 =  VectorUtils.multiply(dz1, - Math.cos(this.beta * z1) * this.beta * this.delta);\n        let dz2 = VectorUtils.add_with_coeffs(dx_diff, dz1, 1 / this.alpha, - Math.cos(this.beta * z1) * this.beta * this.delta / this.alpha)\n        return VectorUtils.add_with_coeffs(dz1, dz2, z1, z2);\n    }\n    \n    sample(T) {\n        let z1 = this.rand.random_normal(0, 1) * Math.sqrt(T);\n        let z2 = this.rand.random_normal(0, 1) * Math.sqrt(T);\n        let x_sum = z1 * this.gamma; \n        // (x1 - x2) / sqrt(2)\n        let x_diff = this.delta * Math.sin(this.beta * z1) + this.alpha * z2; \n        return [(x_sum + x_diff) / Math.sqrt(2), (x_sum - x_diff) / Math.sqrt(2)];\n    }\n}\n\n\n\nclass DoubleHoleDistribution {\n    constructor(alpha=0.3, beta=4., gamma=0.8, delta=0.5) {\n        this.alpha = alpha;\n        this.beta = beta;\n        this.gamma = gamma;\n        this.delta = delta;\n    }\n    init_sampler(){\n        this.rand = new RandomGenerator(42);\n    }\n\n    energy(x) {\n        let [x1, x2] = x;\n        let x_sum = (x1 + x2) / Math.sqrt(2);\n        let x_diff = (x1 - x2) / Math.sqrt(2);\n        let z1 = x_sum / this.gamma;\n        let z2 = (x_diff - Math.tanh(this.beta * z1) * this.delta) / this.alpha;\n        return VectorUtils.norm_squared([z1, z2]) * 0.5; \n    }\n    gradient(x) {\n        let [x1, x2] = x;\n        let x_sum = (x1 + x2) / Math.sqrt(2);\n        let dx_sum = [1 / Math.sqrt(2), 1 / Math.sqrt(2)];\n        let x_diff = (x1 - x2) / Math.sqrt(2);\n        let dx_diff = [1 / Math.sqrt(2), -1 / Math.sqrt(2)];\n        let z1 = x_sum / this.gamma;\n        let dz1 = VectorUtils.multiply(dx_sum, 1. / this.gamma);\n        let z2 = (x_diff - Math.tanh(this.beta * z1) * this.delta) / this.alpha;\n\n        let dz2 = VectorUtils.add_with_coeffs(dx_diff, dz1, 1 / this.alpha, (Math.pow( Math.tanh(this.beta * z1), 2) - 1.) * this.beta * this.delta / this.alpha);\n        return VectorUtils.add_with_coeffs(dz1, dz2, z1, z2);\n    }\n    \n    sample(T) {\n        let z1 = this.rand.random_normal(0, 1) * Math.sqrt(T);\n        let z2 = this.rand.random_normal(0, 1) * Math.sqrt(T);\n        let x_sum = z1 * this.gamma; \n        // (x1 - x2) / sqrt(2)\n        let x_diff = this.delta * Math.tanh(this.beta * z1) + this.alpha * z2; \n        return [(x_sum + x_diff) / Math.sqrt(2), (x_sum - x_diff) / Math.sqrt(2)];\n    }\n}\n\n"]}