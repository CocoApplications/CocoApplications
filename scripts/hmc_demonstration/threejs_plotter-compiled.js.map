{"version":3,"sources":["threejs_plotter.js"],"names":[],"mappings":"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","file":"threejs_plotter-compiled.js","sourcesContent":["let vertex_shader_text = ` \t\t\t\nvarying vec2 uv_fragment;\nvarying vec3 pos;\nvarying vec3 normal_fragment;\n\nvoid main()\n{\n\tuv_fragment = uv;\n\tnormal_fragment = normal;\n\tpos = position;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n}\n`;\n\nlet fragment_shader_text = ` \t\t\t\n// uniform vec2 resolution;\n// uniform vec3 cameraPosition; predefined\nuniform float display_zmax;\nuniform vec3 min_height_color;\nuniform vec3 max_height_color;\nvarying vec2 uv_fragment;\nvarying vec3 pos;\nvarying vec3 normal_fragment;\n\nvoid main( void ) {\n\tfloat height = pos.y / display_zmax; \n\n\tvec2 position = uv_fragment;\n\n\tif(height > 1.){\n\t\tdiscard;\n\t}\n\tvec3 from_camera = normalize(pos - cameraPosition);\n\tvec3 to_light =  vec3( 0.0, 1.0, 0.0 );\n\tvec3 n_normal_fragment = normalize(normal_fragment);\n\n\tfloat _specular = max(dot(from_camera, reflect(to_light, n_normal_fragment) ), 0.);\n\tvec3 specular = pow(_specular, 6.5) * vec3(0.38, 0.34, 0.32);\n\n\t// normal affects alpha\n\tfloat alpha_from_angle = 1. / (1. + exp(- 6. *  dot(from_camera, n_normal_fragment)));\n\tfloat stripes_color = max(5. * (sin(height * 10. * 6.28) - 0.95), 0.);\n\n\t// vec3 height_color = vec3(height_ * 0.7, 0.2, (1. - height_) * 0.5);\n\t// vec3 height_color = height_ * vec3(1., 1., 1.);\n\tvec3 height_color = min_height_color + (max_height_color - min_height_color) * height; \n\n\tgl_FragColor = vec4(specular + height_color + stripes_color,\n\t\t\t\t\t\t0.15 + 0.85 * alpha_from_angle);\n\n}\n`;\n\n// line that can is drawn starting from one end dynamically\nclass DynamicLine {\n\tconstructor(color=0xff0000){\n\t\tlet material = new THREE.LineBasicMaterial( { color : color, linewidth: 2 } );\n\t\tthis.line = new THREE.Line(new THREE.BufferGeometry(), material);\t\t\n\t\tthis.line.translateY(5e-3);\n\t}\n\n\tset_points(points_list){\n\t\t\n\t\tlet vectors = [];\n\t\tvar positions = new Float32Array( points_list.length * 3 ); \n\n\t\tfor (let i = 0; i < points_list.length; i += 1) {\n\t\t\tlet [x, y, z] = points_list[i];\n\t\t\tpositions[3 * i + 0] = x;\n\t\t\tpositions[3 * i + 1] = z;\n\t\t\tpositions[3 * i + 2] = y;\n\t\t}\n\t\tlet geometry = new THREE.BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n\t\tgeometry.vertices = vectors;\n\t\tthis.line.geometry.dispose();\n\t\tthis.line.geometry = geometry;\n\t\tthis.n_visible = 0;\n\t}\n\n\tflush() {\n\t\tthis.n_visible = 0;\n\t\tthis.line.geometry.setDrawRange( 0, this.n_visible + 1);\n\t}\n\n\tadd_visible (){\n\t\tthis.n_visible += 1;\n\t\tthis.line.geometry.setDrawRange( 0, this.n_visible + 1);\n\t\treturn;\n\t}\n}\n\n\nclass DynamicPoints{\n\tconstructor(max_points) {\n\t\tlet point_material = new THREE.PointsMaterial( { size: 0.01, vertexColors: THREE.VertexColors } );\n\n\t\tthis.positions = new Float32Array( max_points * 3 );\n\t\tthis.colors = new Float32Array( max_points * 3 );\n\n\t\tlet point_geometry = new THREE.BufferGeometry();\n\t\tpoint_geometry.addAttribute( 'position', new THREE.BufferAttribute( this.positions, 3 ) );\n\t\tpoint_geometry.addAttribute( 'color', new THREE.BufferAttribute( this.colors, 3 ) );\n\n\t\tthis.points = new THREE.Points(point_geometry, point_material);\n\t\tthis.points.translateY(5e-3);\n\t\tthis.n_visible = 0;\n\t\tthis.flush();\n\t}\n\n\tflush() {\n\t\tthis.n_visible = 0;\n\t\tthis.points.geometry.setDrawRange( 0, this.n_visible);\n\t}\n\n\tset_points(positions, color) {\n\t\tfor(let position of positions) {\n\t\t\tlet [x, y, z] = position;\n\t\t\tlet i = this.n_visible;\n\t\t\tthis.positions[ 3 * i + 0 ] = x;\n\t\t\tthis.positions[ 3 * i + 1 ] = z;\n\t\t\tthis.positions[ 3 * i + 2 ] = y;\n\t\t\tthis.colors[ 3 * i + 0 ] = color[0];\n\t\t\tthis.colors[ 3 * i + 1 ] = color[1],\n\t\t\tthis.colors[ 3 * i + 2 ] = color[2];\n\t\t\tthis.n_visible += 1;\n\t\t}\n\t\t\n\t\tthis._update();\n\t}\n\n\t_update() {\n\t\tthis.points.geometry.attributes['position'].needsUpdate = true;\n\t\tthis.points.geometry.attributes['color'].needsUpdate = true;\n\t\tthis.points.geometry.setDrawRange( 0, this.n_visible);\n\t\tthis.points.geometry.computeBoundingSphere();\n\t}\n\n\tadd_point(position, color) {\n\t\tlet i = this.n_visible;\n\t\tlet [x, y, z] = position;\n\n\t\tthis.positions[ 3 * i + 0 ] = x;\n\t\tthis.positions[ 3 * i + 1 ] = z;\n\t\tthis.positions[ 3 * i + 2 ] = y;\n\n\t\tthis.colors[ 3 * i + 0 ] = color[0];\n\t\tthis.colors[ 3 * i + 1 ] = color[1],\n\t\tthis.colors[ 3 * i + 2 ] = color[2];\n\t\tthis.n_visible += 1;\n\n\t\tthis._update();\n\t}\n\n\t\n}\n\n\nclass Plot3D{\n\tconstructor(parentElement, {\n\t\twidth=800,\n\t\theight=400,\n\t\txmin = -1., \n\t\txmax = 1.,\n\t\tymin = -1., \n\t\tymax = 1.,\n\t\tzmin = 0.,\n\t\tzmax = 1.,\n\t\tdisplay_zmax=0.35,\n\t\tcontrolsDomElement=null,\n\t} = { }){\n\t\tthis.xmin = xmin;\n\t\tthis.xmax = xmax;\n\t\tthis.ymin = ymin;\n\t\tthis.ymax = ymax;\n\t\tthis.zmin = zmin;\n\t\tthis.zmax = zmax;\n\t\tthis.display_zmax = display_zmax;\n\n\t\tthis.scene = new THREE.Scene();\n\t\tthis.camera = new THREE.PerspectiveCamera(35, width / height, 0.1, 50);\n\n\t\tthis.camera.position.z = 0.36;\n\t\tthis.camera.position.x = -0.56;\n\t\tthis.camera.position.y = this.display_zmax * 2.;\n\n\t\tthis.renderer = new THREE.WebGLRenderer({ antialias: true });\n\t\tthis.renderer.setSize(width, height);\n\t\tthis.renderer.setPixelRatio(1);\n\t\tthis.renderer.setClearColor(0xbbbbbb, 1);\n\n\t\tthis.domElement = this.renderer.domElement;\n\t\tthis.domElement.classList.add(\"main-canvas\");\n\n\t\tparentElement.appendChild(this.domElement);\n\t\tparentElement.style.height = height + 'px';\n\n\t\tthis.orbit = new THREE.OrbitControls(this.camera, controlsDomElement || this.renderer.domElement);\n\t\tthis.orbit.enableDamping = true;\n\t\tthis.orbit.dampingFactor = 0.25;\n\t\tthis.orbit.minPolarAngle = Math.PI * 0.05;\n\t\tthis.orbit.maxPolarAngle = Math.PI * 0.7;\n\t\tthis.orbit.minDistance = 0.3;\n\t\tthis.orbit.maxDistance = 1.5;\n\t\tthis.orbit.enableKeys = false;\n\t\tthis.orbit.target = new THREE.Vector3(0.5, 0.33 * this.display_zmax, 0.5);\n\t\tthis.orbit.onUpdate.push( () => requestAnimationFrame(() => {this.redraw();}) );\n\t}\n\t\n\tnormalize(func){\n\t\t// maps from [xmin, xmax], [ymin, ymax], [zmin, zmax] to [0, 1]^3\n\t\tlet new_function = (u, v) => {\n\t\t\tlet x = this.xmin + u * (this.xmax - this.xmin);\n\t\t\tlet y = this.ymin + v * (this.ymax - this.ymin);\n\t\t\tlet result = func(x, y);\n\t\t\treturn (result - this.zmin) * 1. / (this.zmax - this.zmin) * this.display_zmax;\n\t\t}\n\t\treturn new_function\n\t}\n\n\tnormalize_point(point){\n\t\tlet [x, y, z] = point;\n\t\tx = (x - this.xmin) / (this.xmax - this.xmin);\n\t\tz = (z - this.zmin) / (this.zmax - this.zmin) * this.display_zmax;\n\t\ty = (y - this.ymin) / (this.ymax - this.ymin);\n\t\treturn [x, y, z];\n\t}\n\n\tto_vertex(uv_function){\n\t\tlet new_function = function(u, v){\n\t\t\treturn new THREE.Vector3(u, uv_function(u, v), v);\n\t\t}\n\t\treturn new_function\n\t}\n\n\taddCoordinateGrid(n_points=10){\n\t\tlet plane = new THREE.GridHelper(0.5, n_points, 0x0000ff, 0x808080 );\n\t\tplane.position.x = 0.5;\n\t\tplane.position.z = 0.5;\n\t\tthis.scene.add(plane);\n\n\t\treturn plane;\n\t}\n\n\tgenerateSurfaceGeometry(func, n_edges=50) {\n\t\tfunc = this.normalize(func);\n\t\treturn new THREE.ParametricGeometry(this.to_vertex(func), n_edges, n_edges);\n\t}\n\n\taddSurfaceMesh(\n\t\tfunc, \n\t\tmin_height_color=new THREE.Vector3(0.0, 0.0, 0.0), \n\t\tmax_height_color=new THREE.Vector3(0.8, 0.8, 0.8) \n\t) {\n\t\tvar mesh = new THREE.Object3D()\n\t\tlet geometry = this.generateSurfaceGeometry(func);\n\n\t\tlet options = {\n\t\t\tuniforms: { \n\t\t\t\tdisplay_zmax: {value: this.display_zmax},\n\t\t\t\tmin_height_color: {value: min_height_color}, \n\t\t\t\tmax_height_color: {value: max_height_color}, \n\t\t\t},\n\t\t\tvertexShader: vertex_shader_text,\n\t\t\tfragmentShader: fragment_shader_text,\n\t\t\tside: THREE.BackSide,\n\t\t\ttransparent: true,\t\n\t\t};\n\t\tvar shader_material_back = new THREE.ShaderMaterial(options);\n\t\toptions['side'] = THREE.FrontSide;\n\t\tvar shader_material_front = new THREE.ShaderMaterial(options);\n\n\t\tmesh.add(new THREE.Mesh(geometry, shader_material_back));\n\t\tmesh.add(new THREE.Mesh(geometry, shader_material_front));\n\n\t\tthis.scene.add(mesh);\n\t\treturn mesh;\n\t}\n\n\taddDynamicLine(color=0xff0000) {\n\t\tlet line = new DynamicLine();\n\t\tthis.scene.add(line.line);\n\t\treturn line;\n\t}\n\n\taddDynamicPoints({max_points=2000}={}){\n\t\tvar points = new DynamicPoints(max_points);\n\t\tthis.scene.add(points.points);\n\t\treturn points;\n\t}\n\n\tredraw () {\n\t\t// required if controls.enableDamping = true, or if controls.autoRotate = true\n\t\tthis.orbit.update();\n\t\tthis.renderer.render(this.scene, this.camera);\n\t}\n\n}\n\n"]}